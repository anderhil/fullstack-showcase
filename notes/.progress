[v]   User must be able to create an account and log in.

      [+] registration screen added
      [+] login screen + core jwt token auth
      [+] asp.net core authorization used

[v]   When logged in, a user can see, edit and delete saving deposits he entered.

      [+] Simple home screen with selection of actions with buttons
      [+] User can go to savings overview where he can do above actions on his records
      [+] checks for if records belong to user added. No way of smb except admin can remove other records

[v]   Implement at least three roles with different permission levels: a regular user would only be able to CRUD on their owned records, a user manager would be able to CRUD users, and an admin would be able to CRUD all records and users.

      [?] asp.net core auth was used, didn't create separate configurable permissions
      [+] Admin,Manager,User role added which implement above requirement

[v]   A saving deposit is identified by a bank name, account number, an initial amount saved (currency in USD), start date, end date, interest percentage per year and taxes percentage.

      [+] sql database used to store data, entities created and etc

[v]   The interest could be positive or negative. The taxes are only applied over profit.

      [+] user can set negative interest when creating deposit, which means its credit?
      [+] Calculation service implements calculation of profit only for profits > 0

[v]   User can filter saving deposits by the amount (minimum and maximum), bank name and date.

      [+] custom filtering added with these options
      [+] implemented on my own with simple binded obj filtering

[v]   User can generate a revenue report for a given period, that will show the gains and losses from interest and taxes for each deposit. The amount should be green or red if respectively it represents a gain or loss. The report should show the sum of profits and losses at the bottom for that period.

      [+] report is generated based on deposit history records which are created daily for calculation history purposes
      [+] report is generated by clicking button on home screen
      [+] report is simple html
      [?] no requirement for export, possible to add later
      [+] reports are saved in db in json format

[v]   The computation of profit/loss is done on a daily basis. Consider that a year is 360 days.

      [+] there is service which runs daily calculating the deposits and saving result of computation to DepositHistory table
      [+] records contain all the needed info for recovering the history of calculation

[v]   REST API. Make it possible to perform all user actions via the API, including authentication

      [+] its possible to perform all user actions through API
      [+] everything is REST
      [?] maybe there are some flaws is resources naming, need to think more, no time to refactor

[v]   In any case, you should be able to explain how a REST API works and demonstrate that by creating functional tests that use the REST Layer directly. Please be prepared to use REST clients like Postman, cURL, etc. for this purpose.

      [+] Postman used, some sample project with requests in the repository
      [+] Register user, create record, get records
      [+] jwt auth tests

[v]   If itâ€™s a web application, it must be a single-page application. All actions need to be done client side using AJAX, refreshing the page is not acceptable. (If a mobile application, disregard this).

      [+] Web application on Angular 7, one page, no page refresh

[v]   Functional UI/UX design is needed. You are not required to create a unique design, however, do follow best practices to make the project as functional as possible.

      [+] Tried my best - bootstrap styles + some custom fixes for the UI
      [+] Standart app design with all the functionality

[v]  Bonus: unit and e2e tests.

      [-] no e2e tests
      [+] some unit tests for calculations
      [+] some backend integration testing for report generation and deposit history creation
